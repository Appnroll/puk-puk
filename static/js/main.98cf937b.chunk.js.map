{"version":3,"sources":["components/Button.js","components/Location.js","components/RootComponent.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","active","react_default","a","createElement","StyledButton","children","Component","styled","main","_templateObject","Location","setCurrentState","setState","office","Row","components_Button","div","Location_templateObject","RootComponent","isAuthorized","inOffice","garageTaken","haveKey","Wrapper","Header","Property","disabled","components_Location","RootComponent_templateObject","header","_templateObject2","_templateObject3","App","components_RootComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+iBAqBeA,cAjBX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,OAAQT,EAAMS,QAHHR,wEASf,OACIS,EAAAC,EAAAC,cAACC,EAAD,CAAcJ,OAAQL,KAAKI,MAAMC,QAC3BL,KAAKJ,MAAMc,iBAZRC,aAoBfF,EAAeG,IAAOC,KAAVC,IAKI,SAAAlB,GAAK,OAAIA,EAAMS,OAAS,cAAgB,sGCD/CU,cAtBX,SAAAA,EAAYnB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAe,IACflB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiB,GAAAZ,KAAAH,KAAMJ,KAMVoB,gBAAkB,WACdnB,EAAKoB,SAAS,CAAEZ,QAASR,EAAKO,MAAMC,UANpCR,EAAKO,MAAQ,CACTc,QAAQ,GAHGrB,wEAYf,OACIS,EAAAC,EAAAC,cAACW,EAAD,KACIb,EAAAC,EAAAC,cAACY,EAAD,CAAQf,OAAQL,KAAKI,MAAMc,QAA3B,kBAfOP,aAyBjBQ,EAAMP,IAAOS,IAAVC,inBCDMC,cAvBX,SAAAA,EAAa3B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuB,IACjB1B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyB,GAAApB,KAAAH,KAAMJ,KACDQ,MAAQ,CACToB,cAAc,EACdC,UAAU,EACVC,aAAa,EACbC,SAAS,GANI9B,wEAWhB,OACIS,EAAAC,EAAAC,cAACoB,EAAD,KACItB,EAAAC,EAAAC,cAACqB,EAAD,gBACAvB,EAAAC,EAAAC,cAACsB,EAAD,CAAUC,UAAW/B,KAAKI,MAAMoB,cAC5BlB,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAACwB,EAAD,eAjBQrB,aA0BtBiB,EAAUhB,IAAOC,KAAVoB,KAQPJ,EAASjB,IAAOsB,OAAVC,KAQNL,EAAWlB,IAAOS,IAAVe,IAGQ,SAAAxC,GAAK,OAAIA,EAAMmC,SAAW,IAAM,GACzC,SAAAnC,GAAK,OAAIA,EAAMmC,SAAW,GAAM,ICvC9BM,mLANX,OACE/B,EAAAC,EAAAC,cAAC8B,EAAD,aAHY3B,aCSE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.98cf937b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport styled from 'styled-components'\n\nclass Button extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            active: props.active\n        }\n    }\n\n\n    render () {\n        return (\n            <StyledButton active={this.state.active}>\n                { this.props.children }\n            </StyledButton>\n        )\n    }\n}\n\nexport default Button\n\nconst StyledButton = styled.main`\n  width: 100px;\n  height: 100px;\n  border-radius: 50%;\n  color: white;\n  background-color: ${props => props.active ? 'forestgreen' : '#aaa'};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  &:hover {\n    cursor: pointer;\n  }\n`\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport Button from \"./Button\";\n\nclass Location extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            office: true\n        }\n    }\n\n    setCurrentState = () => {\n        this.setState({ active: !this.state.active})\n    }\n\n    render () {\n        return (\n            <Row>\n                <Button active={this.state.office}>\n                    OFFICE\n                </Button>\n            </Row>\n        )\n    }\n}\n\nexport default Location\n\nconst Row = styled.div`\n  display: flex;\n`","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport Location from \"./Location\";\n\nclass RootComponent extends Component {\n    constructor (props) {\n       super(props)\n       this.state = {\n           isAuthorized: true,\n           inOffice: false,\n           garageTaken: false,\n           haveKey: false\n       }\n    }\n\n    render () {\n        return (\n            <Wrapper>\n                <Header>PUK PUK</Header>\n                <Property disabled={!this.state.isAuthorized}>\n                    <h6>Gdzie jeste≈õ?</h6>\n                    <Location/>\n                </Property>\n            </Wrapper>\n        )\n    }\n}\n\nexport default RootComponent\n\nconst Wrapper = styled.main`\n  margin: 0 auto;\n  padding: 0 20px;\n  max-width: 1240px;\n  width: 100%;\n  box-sizing: border-box;\n`\n\nconst Header = styled.header`\n  font-size: 36px;\n  letter-spacing: 2px;\n  display: flex;\n  align-items: center;\n  padding: 20px 0;\n`\n\nconst Property = styled.div`\n  border-top: 1px solid #ddd;\n  padding: 20px 0;\n  filter: grayscale(${props => props.disabled ? 100 : 0}%);\n  opacity: ${props => props.disabled ? 0.2 : 1};\n  h6 {\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    margin-bottom: 15px;\n  }\n`\n","import React, { Component } from 'react'\nimport RootComponent from './components/RootComponent.js'\n\nclass App extends Component {\n  render () {\n    return (\n      <RootComponent/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/reset.css'\nimport './styles/global.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}